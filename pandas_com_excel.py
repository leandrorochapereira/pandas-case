# -*- coding: utf-8 -*-
"""Pandas_com_excel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vuHPXvuj0CmsN9Mo0-7iFBnMTrMsJK_z
"""

import pandas as pd

# Leitura dos arquivos
vendas_aracaju = pd.read_excel("/content/drive/MyDrive/datasets/Aracaju.xlsx")
vendas_fortaleza = pd.read_excel("/content/drive/MyDrive/datasets/Fortaleza.xlsx")
vendas_natal = pd.read_excel("/content/drive/MyDrive/datasets/Natal.xlsx")
vendas_recife = pd.read_excel("/content/drive/MyDrive/datasets/Recife.xlsx")
vendas_salvador = pd.read_excel("/content/drive/MyDrive/datasets/Salvador.xlsx")

# Juntando os arquivos
df = pd.concat([vendas_aracaju, vendas_fortaleza, vendas_natal, vendas_recife, vendas_salvador])

df.head()

df.tail()

df.sample(10)

df.dtypes

# Alterando o tipo de dado da row LojaID para object
 df['LojaID'] = df['LojaID'].astype("object")

df.dtypes

# Consultando valores faltantes
df.isnull().sum()

# Substituindo valores nulos pela média de vendas na row Vendas
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True)

df["Vendas"].mean()

# Criando uma nova row chamada 'Receita' que é o valor da venda * a row "Qtde" de vendas
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

# Retornando a maior receita
df["Receita"].max()

df["Receita"].min()

# nlargest - Retornando as '3' maiores receitas 
df.nlargest(3, "Receita")

# nsmallest - Retornando as '3' menores receitas
df.nsmallest(3, "Receita")

# Agrupando receita por cidade
df.groupby("Cidade")["Receita"].sum()

# Método para ordenar o conjunto de dados
df.sort_values("Receita", ascending=False).head(10)

"""**Trabalhando com datas**"""

# Transformando a coluna de data em tipo inteiro
df["Data"] = df["Data"].astype("int64")

df.dtypes

# Transformando a coluna de data em tipo datetime
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

# Agrupamento por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

# Criando uma nova coluna com o ano
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

# Retornando data mais antigas
df["Data"].min()

# Criando a row de trimestre
df["Trimestre_Venda"] = df["Data"].dt.quarter

df.sample(8)

# Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19

"""**Visualização de dados**"""

df["LojaID"].value_counts(ascending=False)

# Gráfico de barras
df["LojaID"].value_counts(ascending=False).plot.bar()

# Gráfico de barras horizontais
df["LojaID"].value_counts(ascending=True).plot.barh();

# Gráfico de pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

# Total de vendas por cidadade
df["Cidade"].value_counts()

# Adicionando um titulo e alterando o nome dos eixos
import matplotlib.pyplot as plt

df["Cidade"].value_counts().plot.bar(title="Total de Vendas por Cidade")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

# Alterando a cor
df["Cidade"].value_counts().plot.bar(title="Total de Vendas por Cidade", color="red")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

# Alterando o estilo
plt.style.use("ggplot")

df.groupby(df["Trimestre_Venda"])["Qtde"].sum().plot(title="Total Produtos Vendidos x Mes")
plt.xlabel("Mes")
plt.ylabel("Total Produtos Vendidos")
plt.legend();

# Selecionando apenas as vendas de 2019
df_2019 = df[df["Ano_Venda"] == 2019]

plt.hist(df["Qtde"], color="purple");

